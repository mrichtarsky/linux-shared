#!/usr/bin/env python3

import argparse
import os
import shutil

parser = argparse.ArgumentParser(description='Flatten all files recursively from'
                                 ' srcPath to destPath')
parser.add_argument('srcPath')
parser.add_argument('destPath')
parser.add_argument('--dryRun', action='store_true')
parser.add_argument('--deleteSrcPath', action='store_true')
args = parser.parse_args()

destFiles = set()

for root, _, files in os.walk(args.srcPath):
    for name in files:
        srcFile = os.path.join(root, name)
        destFile = os.path.join(args.destPath, name)
        if os.path.exists(destFile):
            with open(srcFile, 'rb') as f:
                data1 = f.read()
            with open(destFile, 'rb') as f:
                data2 = f.read()
            if data1 == data2:
                print('Duplicate, ignoring')
                if not args.dryRun and args.deleteSrcPath:
                    os.unlink(srcFile)
                continue
            prefix, ext = os.path.splitext(destFile)
            counter = 0
            while destFile in destFiles or os.path.exists(destFile):
                destFiles.add(destFile)
                destFile = f"{prefix}_{counter}{ext}" % (prefix, counter, ext)
                counter += 1
            destFiles.add(destFile)
            print('Existing different file, alternate name', destFile)

        if not args.dryRun:
            if args.deleteSrcPath:
                shutil.move(srcFile, destFile)
            else:
                shutil.copy2(srcFile, destFile)
        else:
            if args.deleteSrcPath:
                cmd = 'mv'
            else:
                cmd = 'cp'
            print(f"{cmd} {srcFile} {destFile}")

if args.deleteSrcPath:
    removeSrcPath = True
    for root, _, files in os.walk(args.srcPath):
        if len(files) > 0:
            removeSrcPath = False
            break

    if removeSrcPath:
        print('All files gone, cleaning directory')
        if not args.dryRun:
            shutil.rmtree(args.srcPath)
